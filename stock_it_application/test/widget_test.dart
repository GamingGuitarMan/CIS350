// This is a basic Flutter widget test.
//
// To perform an interaction with a widget in your test, use the WidgetTester
// utility in the flutter_test package. For example, you can send tap and scroll
// gestures. You can also use WidgetTester to find child widgets in the widget
// tree, read text, and verify that the values of widget properties are correct.
/*
import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';

import 'package:stock_it_application/main.dart';

void main() {
  testWidgets('Counter increments smoke test', (WidgetTester tester) async {
    // Build our app and trigger a frame.
    await tester.pumpWidget(const MyApp());

    // Verify that our counter starts at 0.
    expect(find.text('0'), findsOneWidget);
    expect(find.text('1'), findsNothing);

    // Tap the '+' icon and trigger a frame.
    await tester.tap(find.byIcon(Icons.add));
    await tester.pump();

    // Verify that our counter has incremented.
    expect(find.text('0'), findsNothing);
    expect(find.text('1'), findsOneWidget);
  });
}
*/

// This is a basic Flutter widget test.
//
// To perform an interaction with a widget in your test, use the WidgetTester
// utility in the flutter_test package. For example, you can send tap and scroll
// gestures. You can also use WidgetTester to find child widgets in the widget
// tree, read text, and verify that the values of widget properties are correct.

//import 'package:flutter/material.dart';
//import 'package:flutter_test/flutter_test.dart';
//import 'package:get/route_manager.dart';
//import 'dart:async';

//import 'package:stock_it_application/app/home/Binding/controller_binding.dart';
//import 'package:stock_it_application/app/home/Binding/homeBinding.dart';
//import 'package:stock_it_application/app/home/Controller/homeController.dart';
//import 'package:stock_it_application/app/home/Views/homepage.dart';
//import 'package:stock_it_application/main.dart';
//import 'package:stock_it_application/app/home/Views/customFullScrenDialog.dart';
//import 'package:stock_it_application/app/home/Controller/homeController.dart';
//import 'package:firebase_core/firebase_core.dart';
//import 'package:cloud_firestore/cloud_firestore.dart';

//void main() async {
// WidgetsFlutterBinding.ensureInitialized();
//  await Firebase.initializeApp();

//  test(HomeController(), () {
//    Firebase.initializeApp();

//    final saveUpdateTest = HomeController().saveUpdateItem;

//    saveUpdateTest("Eggs", "4", "2", 2); // error test

//    expect(saveUpdateTest, "Eggs , 4, 1, 2");
//  });
//}

/**
 
 In homeController when you call the fucntion, it starts a "FirebaseFirestore Instance"
 that is called "firebaseFirestore"

 2 'collection references' are then made to get the collections (like tables in sql)
 from the DB

 The collection references in the homeController are named as "collectionReference"
 and 'timeReference', for the items, and time collections respectively.

 I used:
    RxList<ItemModel> items = RxList<ItemModel>([]);
  
 to list the items and populated it with:

    Stream<List<ItemModel>> getAllItems() => collectionReference.snapshots().map(
      (query) => query.docs.map((item) => ItemModel.fromMap(item)).toList());

  The list is used for decrementing all items (forEach loop in decrementShelfLife())

  usually the list is needed as you wont know the autogenerated 'docID',
  however, for the time, I manually set the 'docID' = 1, so I could use it

  to get just the time in the database currently, use:

    final docRef = firebaseFirestore.collection('time').doc('1');
    docRef.get().then(
      (DocumentSnapshot doc) {
        final data = doc.data() as Map<String, dynamic>;
        final currentTime = Timestamp.fromMillisecondsSinceEpoch(
            DateTime.now().millisecondsSinceEpoch);

    data.forEach((key, value) {
      lastTimestamp = value;
    });

  It's a hacky way but it works. Gets the data in a list, then gets from the list.
  From what I have found theres no way to directly get a piece of data from the database
  like a sql query. I even talked with Dr. Rafiq and he mentioned that as one of the
  cons of using firebase. 

  

  In deleteData(), the docId is passed in from homepage when tapping 'delete' button
  on the specific item. you can look at deleteData() method to see how that is done


  In saveUpdate, a docId is also passed in, and you can use the: 

    collectionReference
          .add({'name': name, 'shelfLife': shelfLife})

  to add, and also

    collectionReference
          .doc(docId)
          .update({'name': name, 'shelfLife': shelfLife})

  to update.

  
  









 */

import 'dart:async';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:fake_cloud_firestore/fake_cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:stock_it_application/lib/app/home/Controller/homeController.dart';
import 'package:stock_it_application/lib/app/home/Controller/itemModel.dart';
import 'package:stock_it_application/lib/app/home/Controller/timeModel.dart';
import 'package:stock_it_application/app/home/Views/customFullScrenDialog.dart';
import 'package:stock_it_application/app/home/Views/customSnackBar.dart';

const MessagesCollection  'messages';

void main() {
  testWidgets('shows messages', (WidgetTester tester) async {
    final firestore = FakeFirebaseFirestore();
    await firestore.collection(MessagesCollection).add({
      'Eggs' :'5' : 'StockIt' : FieldValue.serverTimestamp(),
    })

    await tester.pumpWidget(MaterialApp(
        title: 'stock_it_application', home: MyHomePage(firestore: firestore)));

        await tester.idle();
        await tester.pump();

        expect(find.text('Hello world!'), findsOneWidget);
        expect(find.text('Message 1 of 1'), findsOneWidget);
  });
}






// Test Save/Update
// Database: For Item that doesnt exist
// Validate name
// delete data
// time update
// Decrement date life
// Home controller
